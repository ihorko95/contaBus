import os,locale
from datetime import time, datetime, timedelta
from pytz import timezone
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler, filters,
)

from dotenv import load_dotenv, find_dotenv

load_dotenv(find_dotenv())
TOKEN=os.getenv('TOKEN')
CHAT_ID=os.getenv('CHATID')
OWNER_ID=int(os.getenv('OWNER'))
# üåç –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å
KYIV_TZ = timezone('Europe/Kyiv')
locale.setlocale(locale.LC_TIME, 'uk_UA.UTF-8')

alertText='–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫—É –±–æ—Ç–∞. @yourbus_travel'
# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è ID –≥—Ä—É–ø–∏
chat_ids = set()

def get_date_range_text():
    tomorrow = datetime.now() + timedelta(days=1)
    day_after_tomorrow = datetime.now() + timedelta(days=2)

    if tomorrow.month == day_after_tomorrow.month:
        date_range = f"{tomorrow.day}-{day_after_tomorrow.day} {tomorrow.strftime('%B')}"
    else:
        date_range = f"{tomorrow.day} {tomorrow.strftime('%B')} ‚Äì {day_after_tomorrow.day} {day_after_tomorrow.strftime('%B')}"

    return date_range

def message():
    period = get_date_range_text()
    return f"–î–æ–±—Ä–æ–≥–æ –¥–Ω—è ‚òòÔ∏è\n\nüì£‚úÖ–ü—Ä–æ—Ö–∞–Ω–Ω—è –∑–≤ º—è–∑–∞—Ç–∏—Å—è –∑ —É—Å—ñ–º–∞ –≤–∞—à–∏–º–∏ –ø–∞—Å–∞–∂–∏—Ä–∞–º–∏ , –∫–æ—Ç—Ä—ñ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω—ñ –Ω–∞ {period} —É—Ç–æ—á–Ω–∏—Ç–∏ —á–∏ —ó–¥—É—Ç—å —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—ñ.\n\n–î—è–∫—É—î–º–æü§ùüòä"


# üïò –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def daily_message(context: ContextTypes.DEFAULT_TYPE):
   await context.bot.send_message(chat_id=CHAT_ID, text=message())


# üìÖ –°—Ç–∞—Ä—Ç: –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    job_name = f"daily_{chat_id}"

    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text(alertText)
        return
    default_time = time(hour=11, minute=45, tzinfo=KYIV_TZ)

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –¥–∂–æ–±–∞ (—è–∫—â–æ —î)
    context.job_queue.scheduler.remove_all_jobs()
    context.job_queue.run_daily(
        callback=daily_message,
        time=default_time,
        chat_id=chat_id,
        name=job_name
    )


    await update.message.reply_text(f"‚úÖ –©–æ–¥–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—å —â–æ–¥–Ω—è –æ {default_time.hour:02d}:{default_time.minute:02d} (–∑–∞ –ö–∏—î–≤–æ–º).")


# ‚è± –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–¥–∞—î —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ hh:mm
async def settime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    job_name = f"daily_{chat_id}"

    try:
        if update.effective_user.id != OWNER_ID:
            await update.message.reply_text(alertText)
            return
        time_arg = context.args[0]
        hour, minute = map(int, time_arg.split(":"))

        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError

        context.job_queue.scheduler.remove_all_jobs()
        context.job_queue.run_daily(
            callback=daily_message,
            time=time(hour=hour, minute=minute, tzinfo=KYIV_TZ),
            chat_id=chat_id,
            name=job_name
        )


        await update.message.reply_text(
            f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—å —â–æ–¥–Ω—è –æ {hour:02d}:{minute:02d} (–∑–∞ –ö–∏—î–≤–æ–º)."
        )

    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /settime HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, /settime 7:30)")


# ‚õî –ó—É–ø–∏–Ω–∫–∞ —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    job_name = f"daily_{chat_id}"
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text(alertText)
        return
    jobs = context.job_queue.get_jobs_by_name(job_name)
    if jobs:
        for job in jobs:
            job.schedule_removal()

        await update.message.reply_text("üõë –©–æ–¥–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É.")

async def send(update: Update, context: ContextTypes.DEFAULT_TYPE):

    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text(alertText)
        print(update.effective_user.id)
        return
    try:
        await daily_message(context)
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")


async def clear_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    for msg_id in range(update.message.message_id, update.message.message_id - 50, -1):
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except:
            pass  # –ú–æ–∂–ª–∏–≤–æ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É

async def handle_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    chat_title = update.effective_chat.title or update.effective_chat.username

    if chat_id not in chat_ids:
        print(f"üìå –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–π —á–∞—Ç: {chat_id} ‚Äî {chat_title}")
        chat_ids.add(chat_id)

    await context.bot.forward_message(
        chat_id=OWNER_ID,
        from_chat_id=chat_id,
        message_id=update.message.message_id
    )
    #delete not relevant message
    if chat_id != int(CHAT_ID):
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {e}")


# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    bot = Application.builder().token(TOKEN).build()

    bot.add_handler(CommandHandler("start", start))
    bot.add_handler(CommandHandler("send", send))
    bot.add_handler(CommandHandler("settime", settime))
    bot.add_handler(CommandHandler("stop", stop))
    bot.add_handler(CommandHandler("clear", clear_chat))

    # –ë–æ—Ç —Ä–µ–∞–≥—É—î –Ω–∞ –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.add_handler(MessageHandler(filters.ALL, handle_chat_id))
    print("ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î.")
    bot.run_polling()
